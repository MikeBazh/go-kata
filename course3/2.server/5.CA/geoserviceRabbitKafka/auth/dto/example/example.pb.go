// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: example.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GeoArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat string `protobuf:"bytes,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon string `protobuf:"bytes,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *GeoArgs) Reset() {
	*x = GeoArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoArgs) ProtoMessage() {}

func (x *GeoArgs) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoArgs.ProtoReflect.Descriptor instead.
func (*GeoArgs) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{0}
}

func (x *GeoArgs) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *GeoArgs) GetLon() string {
	if x != nil {
		return x.Lon
	}
	return ""
}

type QueryAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAddr string `protobuf:"bytes,1,opt,name=queryAddr,proto3" json:"queryAddr,omitempty"`
}

func (x *QueryAddr) Reset() {
	*x = QueryAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAddr) ProtoMessage() {}

func (x *QueryAddr) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAddr.ProtoReflect.Descriptor instead.
func (*QueryAddr) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{1}
}

func (x *QueryAddr) GetQueryAddr() string {
	if x != nil {
		return x.QueryAddr
	}
	return ""
}

type GeoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *GeoReply) Reset() {
	*x = GeoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoReply) ProtoMessage() {}

func (x *GeoReply) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoReply.ProtoReflect.Descriptor instead.
func (*GeoReply) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{2}
}

func (x *GeoReply) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type SearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *SearchReply) Reset() {
	*x = SearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReply) ProtoMessage() {}

func (x *SearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReply.ProtoReflect.Descriptor instead.
func (*SearchReply) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{3}
}

func (x *SearchReply) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value             string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	UnrestrictedValue string `protobuf:"bytes,2,opt,name=unrestricted_value,json=unrestrictedValue,proto3" json:"unrestricted_value,omitempty"`
	Data              *Data  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{4}
}

func (x *Address) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Address) GetUnrestrictedValue() string {
	if x != nil {
		return x.UnrestrictedValue
	}
	return ""
}

func (x *Address) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source               string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Result               string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	PostalCode           string `protobuf:"bytes,3,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Country              string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	CountryIsoCode       string `protobuf:"bytes,5,opt,name=country_iso_code,json=countryIsoCode,proto3" json:"country_iso_code,omitempty"`
	FederalDistrict      string `protobuf:"bytes,6,opt,name=federal_district,json=federalDistrict,proto3" json:"federal_district,omitempty"`
	RegionFiasId         string `protobuf:"bytes,7,opt,name=region_fias_id,json=regionFiasId,proto3" json:"region_fias_id,omitempty"`
	RegionKladrId        string `protobuf:"bytes,8,opt,name=region_kladr_id,json=regionKladrId,proto3" json:"region_kladr_id,omitempty"`
	RegionIsoCode        string `protobuf:"bytes,9,opt,name=region_iso_code,json=regionIsoCode,proto3" json:"region_iso_code,omitempty"`
	RegionWithType       string `protobuf:"bytes,10,opt,name=region_with_type,json=regionWithType,proto3" json:"region_with_type,omitempty"`
	RegionType           string `protobuf:"bytes,11,opt,name=region_type,json=regionType,proto3" json:"region_type,omitempty"`
	RegionTypeFull       string `protobuf:"bytes,12,opt,name=region_type_full,json=regionTypeFull,proto3" json:"region_type_full,omitempty"`
	Region               string `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`
	AreaFiasId           string `protobuf:"bytes,14,opt,name=area_fias_id,json=areaFiasId,proto3" json:"area_fias_id,omitempty"`
	AreaKladrId          string `protobuf:"bytes,15,opt,name=area_kladr_id,json=areaKladrId,proto3" json:"area_kladr_id,omitempty"`
	AreaWithType         string `protobuf:"bytes,16,opt,name=area_with_type,json=areaWithType,proto3" json:"area_with_type,omitempty"`
	AreaType             string `protobuf:"bytes,17,opt,name=area_type,json=areaType,proto3" json:"area_type,omitempty"`
	AreaTypeFull         string `protobuf:"bytes,18,opt,name=area_type_full,json=areaTypeFull,proto3" json:"area_type_full,omitempty"`
	Area                 string `protobuf:"bytes,19,opt,name=area,proto3" json:"area,omitempty"`
	CityFiasId           string `protobuf:"bytes,20,opt,name=city_fias_id,json=cityFiasId,proto3" json:"city_fias_id,omitempty"`
	CityKladrId          string `protobuf:"bytes,21,opt,name=city_kladr_id,json=cityKladrId,proto3" json:"city_kladr_id,omitempty"`
	CityWithType         string `protobuf:"bytes,22,opt,name=city_with_type,json=cityWithType,proto3" json:"city_with_type,omitempty"`
	CityType             string `protobuf:"bytes,23,opt,name=city_type,json=cityType,proto3" json:"city_type,omitempty"`
	CityTypeFull         string `protobuf:"bytes,24,opt,name=city_type_full,json=cityTypeFull,proto3" json:"city_type_full,omitempty"`
	City                 string `protobuf:"bytes,25,opt,name=city,proto3" json:"city,omitempty"`
	CityArea             string `protobuf:"bytes,26,opt,name=city_area,json=cityArea,proto3" json:"city_area,omitempty"`
	CityDistrictFiasId   string `protobuf:"bytes,27,opt,name=city_district_fias_id,json=cityDistrictFiasId,proto3" json:"city_district_fias_id,omitempty"`
	CityDistrictKladrId  string `protobuf:"bytes,28,opt,name=city_district_kladr_id,json=cityDistrictKladrId,proto3" json:"city_district_kladr_id,omitempty"`
	CityDistrictWithType string `protobuf:"bytes,29,opt,name=city_district_with_type,json=cityDistrictWithType,proto3" json:"city_district_with_type,omitempty"`
	CityDistrictType     string `protobuf:"bytes,30,opt,name=city_district_type,json=cityDistrictType,proto3" json:"city_district_type,omitempty"`
	CityDistrictTypeFull string `protobuf:"bytes,31,opt,name=city_district_type_full,json=cityDistrictTypeFull,proto3" json:"city_district_type_full,omitempty"`
	CityDistrict         string `protobuf:"bytes,32,opt,name=city_district,json=cityDistrict,proto3" json:"city_district,omitempty"`
	SettlementFiasId     string `protobuf:"bytes,33,opt,name=settlement_fias_id,json=settlementFiasId,proto3" json:"settlement_fias_id,omitempty"`
	SettlementKladrId    string `protobuf:"bytes,34,opt,name=settlement_kladr_id,json=settlementKladrId,proto3" json:"settlement_kladr_id,omitempty"`
	SettlementWithType   string `protobuf:"bytes,35,opt,name=settlement_with_type,json=settlementWithType,proto3" json:"settlement_with_type,omitempty"`
	SettlementType       string `protobuf:"bytes,36,opt,name=settlement_type,json=settlementType,proto3" json:"settlement_type,omitempty"`
	SettlementTypeFull   string `protobuf:"bytes,37,opt,name=settlement_type_full,json=settlementTypeFull,proto3" json:"settlement_type_full,omitempty"`
	Settlement           string `protobuf:"bytes,38,opt,name=settlement,proto3" json:"settlement,omitempty"`
	StreetFiasId         string `protobuf:"bytes,39,opt,name=street_fias_id,json=streetFiasId,proto3" json:"street_fias_id,omitempty"`
	StreetKladrId        string `protobuf:"bytes,40,opt,name=street_kladr_id,json=streetKladrId,proto3" json:"street_kladr_id,omitempty"`
	StreetWithType       string `protobuf:"bytes,41,opt,name=street_with_type,json=streetWithType,proto3" json:"street_with_type,omitempty"`
	StreetType           string `protobuf:"bytes,42,opt,name=street_type,json=streetType,proto3" json:"street_type,omitempty"`
	StreetTypeFull       string `protobuf:"bytes,43,opt,name=street_type_full,json=streetTypeFull,proto3" json:"street_type_full,omitempty"`
	Street               string `protobuf:"bytes,44,opt,name=street,proto3" json:"street,omitempty"`
	HouseFiasId          string `protobuf:"bytes,45,opt,name=house_fias_id,json=houseFiasId,proto3" json:"house_fias_id,omitempty"`
	HouseKladrId         string `protobuf:"bytes,46,opt,name=house_kladr_id,json=houseKladrId,proto3" json:"house_kladr_id,omitempty"`
	HouseType            string `protobuf:"bytes,47,opt,name=house_type,json=houseType,proto3" json:"house_type,omitempty"`
	HouseTypeFull        string `protobuf:"bytes,48,opt,name=house_type_full,json=houseTypeFull,proto3" json:"house_type_full,omitempty"`
	House                string `protobuf:"bytes,49,opt,name=house,proto3" json:"house,omitempty"`
	HouseCadnum          string `protobuf:"bytes,50,opt,name=house_cadnum,json=houseCadnum,proto3" json:"house_cadnum,omitempty"`
	BlockType            string `protobuf:"bytes,51,opt,name=block_type,json=blockType,proto3" json:"block_type,omitempty"`
	BlockTypeFull        string `protobuf:"bytes,52,opt,name=block_type_full,json=blockTypeFull,proto3" json:"block_type_full,omitempty"`
	Block                string `protobuf:"bytes,53,opt,name=block,proto3" json:"block,omitempty"`
	Entrance             string `protobuf:"bytes,54,opt,name=entrance,proto3" json:"entrance,omitempty"`
	Floor                string `protobuf:"bytes,55,opt,name=floor,proto3" json:"floor,omitempty"`
	FlatFiasId           string `protobuf:"bytes,56,opt,name=flat_fias_id,json=flatFiasId,proto3" json:"flat_fias_id,omitempty"`
	FlatType             string `protobuf:"bytes,57,opt,name=flat_type,json=flatType,proto3" json:"flat_type,omitempty"`
	FlatTypeFull         string `protobuf:"bytes,58,opt,name=flat_type_full,json=flatTypeFull,proto3" json:"flat_type_full,omitempty"`
	Flat                 string `protobuf:"bytes,59,opt,name=flat,proto3" json:"flat,omitempty"`
	FlatArea             string `protobuf:"bytes,60,opt,name=flat_area,json=flatArea,proto3" json:"flat_area,omitempty"`
	FlatCadnum           string `protobuf:"bytes,61,opt,name=flat_cadnum,json=flatCadnum,proto3" json:"flat_cadnum,omitempty"`
	SquareMeterPrice     string `protobuf:"bytes,62,opt,name=square_meter_price,json=squareMeterPrice,proto3" json:"square_meter_price,omitempty"`
	FlatPrice            string `protobuf:"bytes,63,opt,name=flat_price,json=flatPrice,proto3" json:"flat_price,omitempty"`
	PostalBox            string `protobuf:"bytes,64,opt,name=postal_box,json=postalBox,proto3" json:"postal_box,omitempty"`
	FiasId               string `protobuf:"bytes,65,opt,name=fias_id,json=fiasId,proto3" json:"fias_id,omitempty"`
	FiasCode             string `protobuf:"bytes,66,opt,name=fias_code,json=fiasCode,proto3" json:"fias_code,omitempty"`
	FiasLevel            string `protobuf:"bytes,67,opt,name=fias_level,json=fiasLevel,proto3" json:"fias_level,omitempty"`
	FiasActualityState   string `protobuf:"bytes,68,opt,name=fias_actuality_state,json=fiasActualityState,proto3" json:"fias_actuality_state,omitempty"`
	KladrId              string `protobuf:"bytes,69,opt,name=kladr_id,json=kladrId,proto3" json:"kladr_id,omitempty"`
	CapitalMarker        string `protobuf:"bytes,70,opt,name=capital_marker,json=capitalMarker,proto3" json:"capital_marker,omitempty"`
	Okato                string `protobuf:"bytes,71,opt,name=okato,proto3" json:"okato,omitempty"`
	Oktmo                string `protobuf:"bytes,72,opt,name=oktmo,proto3" json:"oktmo,omitempty"`
	TaxOffice            string `protobuf:"bytes,73,opt,name=tax_office,json=taxOffice,proto3" json:"tax_office,omitempty"`
	TaxOfficeLegal       string `protobuf:"bytes,74,opt,name=tax_office_legal,json=taxOfficeLegal,proto3" json:"tax_office_legal,omitempty"`
	Timezone             string `protobuf:"bytes,75,opt,name=timezone,proto3" json:"timezone,omitempty"`
	GeoLat               string `protobuf:"bytes,76,opt,name=geo_lat,json=geoLat,proto3" json:"geo_lat,omitempty"`
	GeoLon               string `protobuf:"bytes,77,opt,name=geo_lon,json=geoLon,proto3" json:"geo_lon,omitempty"`
	BeltwayHit           string `protobuf:"bytes,78,opt,name=beltway_hit,json=beltwayHit,proto3" json:"beltway_hit,omitempty"`
	BeltwayDistance      string `protobuf:"bytes,79,opt,name=beltway_distance,json=beltwayDistance,proto3" json:"beltway_distance,omitempty"`
	QcGeo                string `protobuf:"bytes,80,opt,name=qc_geo,json=qcGeo,proto3" json:"qc_geo,omitempty"`
	QcComplete           string `protobuf:"bytes,81,opt,name=qc_complete,json=qcComplete,proto3" json:"qc_complete,omitempty"`
	QcHouse              string `protobuf:"bytes,82,opt,name=qc_house,json=qcHouse,proto3" json:"qc_house,omitempty"`
	Qc                   string `protobuf:"bytes,83,opt,name=qc,proto3" json:"qc,omitempty"`
	UnparsedParts        string `protobuf:"bytes,84,opt,name=unparsed_parts,json=unparsedParts,proto3" json:"unparsed_parts,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_example_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_example_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_example_proto_rawDescGZIP(), []int{5}
}

func (x *Data) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Data) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Data) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Data) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Data) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *Data) GetFederalDistrict() string {
	if x != nil {
		return x.FederalDistrict
	}
	return ""
}

func (x *Data) GetRegionFiasId() string {
	if x != nil {
		return x.RegionFiasId
	}
	return ""
}

func (x *Data) GetRegionKladrId() string {
	if x != nil {
		return x.RegionKladrId
	}
	return ""
}

func (x *Data) GetRegionIsoCode() string {
	if x != nil {
		return x.RegionIsoCode
	}
	return ""
}

func (x *Data) GetRegionWithType() string {
	if x != nil {
		return x.RegionWithType
	}
	return ""
}

func (x *Data) GetRegionType() string {
	if x != nil {
		return x.RegionType
	}
	return ""
}

func (x *Data) GetRegionTypeFull() string {
	if x != nil {
		return x.RegionTypeFull
	}
	return ""
}

func (x *Data) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Data) GetAreaFiasId() string {
	if x != nil {
		return x.AreaFiasId
	}
	return ""
}

func (x *Data) GetAreaKladrId() string {
	if x != nil {
		return x.AreaKladrId
	}
	return ""
}

func (x *Data) GetAreaWithType() string {
	if x != nil {
		return x.AreaWithType
	}
	return ""
}

func (x *Data) GetAreaType() string {
	if x != nil {
		return x.AreaType
	}
	return ""
}

func (x *Data) GetAreaTypeFull() string {
	if x != nil {
		return x.AreaTypeFull
	}
	return ""
}

func (x *Data) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *Data) GetCityFiasId() string {
	if x != nil {
		return x.CityFiasId
	}
	return ""
}

func (x *Data) GetCityKladrId() string {
	if x != nil {
		return x.CityKladrId
	}
	return ""
}

func (x *Data) GetCityWithType() string {
	if x != nil {
		return x.CityWithType
	}
	return ""
}

func (x *Data) GetCityType() string {
	if x != nil {
		return x.CityType
	}
	return ""
}

func (x *Data) GetCityTypeFull() string {
	if x != nil {
		return x.CityTypeFull
	}
	return ""
}

func (x *Data) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Data) GetCityArea() string {
	if x != nil {
		return x.CityArea
	}
	return ""
}

func (x *Data) GetCityDistrictFiasId() string {
	if x != nil {
		return x.CityDistrictFiasId
	}
	return ""
}

func (x *Data) GetCityDistrictKladrId() string {
	if x != nil {
		return x.CityDistrictKladrId
	}
	return ""
}

func (x *Data) GetCityDistrictWithType() string {
	if x != nil {
		return x.CityDistrictWithType
	}
	return ""
}

func (x *Data) GetCityDistrictType() string {
	if x != nil {
		return x.CityDistrictType
	}
	return ""
}

func (x *Data) GetCityDistrictTypeFull() string {
	if x != nil {
		return x.CityDistrictTypeFull
	}
	return ""
}

func (x *Data) GetCityDistrict() string {
	if x != nil {
		return x.CityDistrict
	}
	return ""
}

func (x *Data) GetSettlementFiasId() string {
	if x != nil {
		return x.SettlementFiasId
	}
	return ""
}

func (x *Data) GetSettlementKladrId() string {
	if x != nil {
		return x.SettlementKladrId
	}
	return ""
}

func (x *Data) GetSettlementWithType() string {
	if x != nil {
		return x.SettlementWithType
	}
	return ""
}

func (x *Data) GetSettlementType() string {
	if x != nil {
		return x.SettlementType
	}
	return ""
}

func (x *Data) GetSettlementTypeFull() string {
	if x != nil {
		return x.SettlementTypeFull
	}
	return ""
}

func (x *Data) GetSettlement() string {
	if x != nil {
		return x.Settlement
	}
	return ""
}

func (x *Data) GetStreetFiasId() string {
	if x != nil {
		return x.StreetFiasId
	}
	return ""
}

func (x *Data) GetStreetKladrId() string {
	if x != nil {
		return x.StreetKladrId
	}
	return ""
}

func (x *Data) GetStreetWithType() string {
	if x != nil {
		return x.StreetWithType
	}
	return ""
}

func (x *Data) GetStreetType() string {
	if x != nil {
		return x.StreetType
	}
	return ""
}

func (x *Data) GetStreetTypeFull() string {
	if x != nil {
		return x.StreetTypeFull
	}
	return ""
}

func (x *Data) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Data) GetHouseFiasId() string {
	if x != nil {
		return x.HouseFiasId
	}
	return ""
}

func (x *Data) GetHouseKladrId() string {
	if x != nil {
		return x.HouseKladrId
	}
	return ""
}

func (x *Data) GetHouseType() string {
	if x != nil {
		return x.HouseType
	}
	return ""
}

func (x *Data) GetHouseTypeFull() string {
	if x != nil {
		return x.HouseTypeFull
	}
	return ""
}

func (x *Data) GetHouse() string {
	if x != nil {
		return x.House
	}
	return ""
}

func (x *Data) GetHouseCadnum() string {
	if x != nil {
		return x.HouseCadnum
	}
	return ""
}

func (x *Data) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *Data) GetBlockTypeFull() string {
	if x != nil {
		return x.BlockTypeFull
	}
	return ""
}

func (x *Data) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

func (x *Data) GetEntrance() string {
	if x != nil {
		return x.Entrance
	}
	return ""
}

func (x *Data) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *Data) GetFlatFiasId() string {
	if x != nil {
		return x.FlatFiasId
	}
	return ""
}

func (x *Data) GetFlatType() string {
	if x != nil {
		return x.FlatType
	}
	return ""
}

func (x *Data) GetFlatTypeFull() string {
	if x != nil {
		return x.FlatTypeFull
	}
	return ""
}

func (x *Data) GetFlat() string {
	if x != nil {
		return x.Flat
	}
	return ""
}

func (x *Data) GetFlatArea() string {
	if x != nil {
		return x.FlatArea
	}
	return ""
}

func (x *Data) GetFlatCadnum() string {
	if x != nil {
		return x.FlatCadnum
	}
	return ""
}

func (x *Data) GetSquareMeterPrice() string {
	if x != nil {
		return x.SquareMeterPrice
	}
	return ""
}

func (x *Data) GetFlatPrice() string {
	if x != nil {
		return x.FlatPrice
	}
	return ""
}

func (x *Data) GetPostalBox() string {
	if x != nil {
		return x.PostalBox
	}
	return ""
}

func (x *Data) GetFiasId() string {
	if x != nil {
		return x.FiasId
	}
	return ""
}

func (x *Data) GetFiasCode() string {
	if x != nil {
		return x.FiasCode
	}
	return ""
}

func (x *Data) GetFiasLevel() string {
	if x != nil {
		return x.FiasLevel
	}
	return ""
}

func (x *Data) GetFiasActualityState() string {
	if x != nil {
		return x.FiasActualityState
	}
	return ""
}

func (x *Data) GetKladrId() string {
	if x != nil {
		return x.KladrId
	}
	return ""
}

func (x *Data) GetCapitalMarker() string {
	if x != nil {
		return x.CapitalMarker
	}
	return ""
}

func (x *Data) GetOkato() string {
	if x != nil {
		return x.Okato
	}
	return ""
}

func (x *Data) GetOktmo() string {
	if x != nil {
		return x.Oktmo
	}
	return ""
}

func (x *Data) GetTaxOffice() string {
	if x != nil {
		return x.TaxOffice
	}
	return ""
}

func (x *Data) GetTaxOfficeLegal() string {
	if x != nil {
		return x.TaxOfficeLegal
	}
	return ""
}

func (x *Data) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Data) GetGeoLat() string {
	if x != nil {
		return x.GeoLat
	}
	return ""
}

func (x *Data) GetGeoLon() string {
	if x != nil {
		return x.GeoLon
	}
	return ""
}

func (x *Data) GetBeltwayHit() string {
	if x != nil {
		return x.BeltwayHit
	}
	return ""
}

func (x *Data) GetBeltwayDistance() string {
	if x != nil {
		return x.BeltwayDistance
	}
	return ""
}

func (x *Data) GetQcGeo() string {
	if x != nil {
		return x.QcGeo
	}
	return ""
}

func (x *Data) GetQcComplete() string {
	if x != nil {
		return x.QcComplete
	}
	return ""
}

func (x *Data) GetQcHouse() string {
	if x != nil {
		return x.QcHouse
	}
	return ""
}

func (x *Data) GetQc() string {
	if x != nil {
		return x.Qc
	}
	return ""
}

func (x *Data) GetUnparsedParts() string {
	if x != nil {
		return x.UnparsedParts
	}
	return ""
}

var File_example_proto protoreflect.FileDescriptor

var file_example_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x2d, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x22,
	0x37, 0x0a, 0x08, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x16, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x61,
	0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6c,
	0x61, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x46, 0x69, 0x61, 0x73,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6b, 0x6c, 0x61, 0x64, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x65, 0x61, 0x4b,
	0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x65, 0x61, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x72, 0x65, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x74, 0x79, 0x46,
	0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x6c,
	0x61, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x69,
	0x74, 0x79, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69, 0x74,
	0x79, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x41,
	0x72, 0x65, 0x61, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x69,
	0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x4b, 0x6c,
	0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x61, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x4b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x61, 0x64, 0x6e, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x61, 0x64, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x66,
	0x6c, 0x61, 0x74, 0x5f, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x46, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6c,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x64, 0x6e, 0x75, 0x6d,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x43, 0x61, 0x64, 0x6e,
	0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x78, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x61, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x61, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x66, 0x69, 0x61, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6b, 0x61, 0x74, 0x6f,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x6b, 0x61, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x6b, 0x74, 0x6d, 0x6f, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x6b,
	0x74, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x4f, 0x66, 0x66, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x78, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61,
	0x78, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x5f,
	0x6c, 0x61, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6f, 0x4c, 0x61,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x6e, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65,
	0x6c, 0x74, 0x77, 0x61, 0x79, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x65, 0x6c, 0x74, 0x77, 0x61, 0x79, 0x48, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62,
	0x65, 0x6c, 0x74, 0x77, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x6c, 0x74, 0x77, 0x61, 0x79, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x71, 0x63, 0x5f, 0x67, 0x65, 0x6f,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x63, 0x47, 0x65, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x71, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x71, 0x63, 0x5f, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x71, 0x63, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x63, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x75, 0x6e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x32, 0x6c, 0x0a, 0x07, 0x47, 0x72, 0x65, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x47,
	0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65,
	0x6f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x03,
	0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_example_proto_rawDescOnce sync.Once
	file_example_proto_rawDescData = file_example_proto_rawDesc
)

func file_example_proto_rawDescGZIP() []byte {
	file_example_proto_rawDescOnce.Do(func() {
		file_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_example_proto_rawDescData)
	})
	return file_example_proto_rawDescData
}

var file_example_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_example_proto_goTypes = []interface{}{
	(*GeoArgs)(nil),     // 0: main.GeoArgs
	(*QueryAddr)(nil),   // 1: main.QueryAddr
	(*GeoReply)(nil),    // 2: main.GeoReply
	(*SearchReply)(nil), // 3: main.SearchReply
	(*Address)(nil),     // 4: main.Address
	(*Data)(nil),        // 5: main.Data
}
var file_example_proto_depIdxs = []int32{
	4, // 0: main.GeoReply.addresses:type_name -> main.Address
	4, // 1: main.SearchReply.addresses:type_name -> main.Address
	5, // 2: main.Address.data:type_name -> main.Data
	0, // 3: main.Greeter.GeoCode:input_type -> main.GeoArgs
	1, // 4: main.Greeter.AddressSearch:input_type -> main.QueryAddr
	2, // 5: main.Greeter.GeoCode:output_type -> main.GeoReply
	3, // 6: main.Greeter.AddressSearch:output_type -> main.SearchReply
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_example_proto_init() }
func file_example_proto_init() {
	if File_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_example_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_example_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_example_proto_goTypes,
		DependencyIndexes: file_example_proto_depIdxs,
		MessageInfos:      file_example_proto_msgTypes,
	}.Build()
	File_example_proto = out.File
	file_example_proto_rawDesc = nil
	file_example_proto_goTypes = nil
	file_example_proto_depIdxs = nil
}
